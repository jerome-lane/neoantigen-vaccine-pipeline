# Copyright (c) 2018. Mount Sinai School of Medicine
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from os.path import join
import re
import tempfile
import shutil


def _add_line_to_vcf_header(vcf_path:str, vcf_out_path:str, add_ref_line:str):
  reference_bool = False
  with open(vcf_path, 'r') as file1, open(vcf_out_path, 'w') as file2:
    for line in file1:
      if re.match('^##reference', line):
        reference_bool = True
      if re.match('^#CHROM', line) and not reference_bool:
        file2.write(add_ref_line)
      file2.write(line)

# run a separate mutect task for each chromosome
rule mutect2_per_chr:
  input:
    normal = join(WORKDIR, "normal_aligned_coordinate_sorted_dups_indelreal_bqsr.bam"),
    tumor = join(WORKDIR, "tumor_aligned_coordinate_sorted_dups_indelreal_bqsr.bam")
  output:
    temp(join(WORKDIR, "mutect2_{chr}.vcf.idx")),
    stats = join(WORKDIR, "mutect2_{chr}.vcf.stats"),
    f1r2 = join(WORKDIR, "f1r2-{chr}.tar.gz"),
    vcf = join(WORKDIR, "mutect2_{chr}.vcf")
  params:
    reference = config["reference"]["genome"],
    gnomad = config["reference"]["gnomad"],
    pon = config["reference"]["pon"]
  benchmark:
    join(BENCHMARKDIR, "mutect2_{chr}.txt")
  log:
    join(LOGDIR, "mutect2_{chr}.log")
  resources:
    mem_mb = 2000
  run:
    mitochondria = ''
    if wildcards.chr in ['Mt', 'mt', 'chrM']:
      mitochondria = '--mitochondria-mode'
    shell("""
      $GATK_BIN/gatk --java-options -Xmx2g Mutect2 \
      -I:normal {input.normal} \
      -I:tumor {input.tumor} \
      -R {params.reference} \
      -pon {params.pon} \
      %s \
      --germline-resource {params.gnomad} \
      --af-of-alleles-not-in-resource 0.0000025 \
      --f1r2-tar-gz {output.f1r2} \
      -L {wildcards.chr} \
      -O {output.vcf} \
      2> {log}
      """ % mitochondria)

rule merge_mutect2_stats:
  input:
    expand(join(WORKDIR, "mutect2_{chr}.vcf.stats"), chr=config["contigs"])
  output:
    join(WORKDIR, "mutect2-unfiltered-ref.vcf.stats")
  run:
    stat_files = ' '.join(['-stats %s' % x for x in input])
    shell("""
      $GATK_BIN/gatk MergeMutectStats \
      %s \
      -O {output}
      """ % stat_files)

rule mutect2_concat:
  input:
    stats = join(WORKDIR,'mutect2-unfiltered-ref.vcf.stats'),
    vcfs = expand(join(WORKDIR, "mutect2_{chr}.vcf"), chr=config["contigs"])
  output:
    join(WORKDIR, "mutect2-unfiltered.vcf")
  run:
    shell("""vcf-concat {input.vcfs} > {output}""")

rule copy_and_add_reference:
  input:
    join(WORKDIR, "mutect2-unfiltered.vcf"),
  params:
    config["reference"]["genome"]
  output:
    join(WORKDIR, "mutect2-unfiltered-ref.vcf"),
  run:
    reference_path = join(WORKDIR, str(params))
    _add_line_to_vcf_header(str(input), str(output), f'##reference={reference_path}\n')

rule learn_read_orientation_model:
  input:
    expand(join(WORKDIR, "f1r2-{chr}.tar.gz"), chr=config["contigs"]),
  output:
    join(WORKDIR, "read-orientation-model.tar.gz"),
  run:
    all_f1_r2_input = ' '.join(['-I %s' % x for x in input])
    shell("""
        $GATK_BIN/gatk LearnReadOrientationModel \
        %s \
        -O {output}""" % all_f1_r2_input)

rule get_pileup_summaries:
  input:
    tumor = join(WORKDIR, "tumor_aligned_coordinate_sorted_dups_indelreal_bqsr.bam")
  output:
    join(WORKDIR, "getpileupsummaries.table")
  params:
    biallelic = config["reference"]["gnomad-bi"]
  log:
    join(LOGDIR, "getpileupsummaries.log")
  run:
    chrs = ' '.join(['-L %s' % x for x in config['contigs']])
    shell("""
        $GATK_BIN/gatk GetPileupSummaries \
        -I {input.tumor} \
        -V {params.biallelic} \
        %s \
        -O {output}""" % chrs)

rule calculate_contamination:
  input:
    pileup = join(WORKDIR, "getpileupsummaries.table")
  output:
    calc = join(WORKDIR, "calculatecontamination.table"),
    seg = join(WORKDIR, "segments.table")
  run:
    shell("""
      $GATK_BIN/gatk CalculateContamination \
      -I {input.pileup} \
      -tumor-segmentation {output.seg} \
      -O {output.calc}""")

rule filter_1_mutect2:
  input:
    vcf = join(WORKDIR, "mutect2-unfiltered-ref.vcf"),
    stats = join(WORKDIR, "mutect2-unfiltered-ref.vcf.stats"),
    seg = join(WORKDIR, "segments.table"),
    cont = join(WORKDIR, "calculatecontamination.table"),
    ob_prior = join(WORKDIR, 'read-orientation-model.tar.gz')
  output:
    vcf = join(WORKDIR, "mutect.vcf"),
  params:
    reference = config["reference"]["genome"]
  benchmark:
    join(BENCHMARKDIR, "mutect2_filter.txt")
  log:
    join(LOGDIR, "mutect2_filter.log")
  run:
    tempfile = input.vcf + '.stats'
    shutil.move(input.stats, tempfile)
    shell("""
      $GATK_BIN/gatk FilterMutectCalls \
      -R {params.reference} \
      -V {input.vcf} \
      --contamination-table {input.cont} \
      --tumor-segmentation {input.seg} \
      --ob-priors {input.ob_prior} \
      -O {output.vcf} \
      >> {log} 2>&1""")

rule manta:
  input:
    normal = join(WORKDIR, "normal_aligned_coordinate_sorted_dups_indelreal_bqsr.bam"),
    tumor = join(WORKDIR, "tumor_aligned_coordinate_sorted_dups_indelreal_bqsr.bam")
  params:
    reference = config["reference"]["genome"],
    output_dir = MANTA_OUTPUT_DIR
  output:
    diploid_sv_vcf = join(MANTA_OUTPUT_DIR, "results/variants/diploidSV.vcf.gz"),
    diploid_sv_idx = join(MANTA_OUTPUT_DIR, "results/variants/diploidSV.vcf.gz.tbi"),
    somatic_sv_vcf = join(MANTA_OUTPUT_DIR, "results/variants/somaticSV.vcf.gz"),
    somatic_sv_idx = join(MANTA_OUTPUT_DIR, "results/variants/somaticSV.vcf.gz.tbi"),
    cand_indel_vcf = join(MANTA_OUTPUT_DIR, "results/variants/candidateSmallIndels.vcf.gz"),
    cand_indel_idx = join(MANTA_OUTPUT_DIR, "results/variants/candidateSmallIndels.vcf.gz.tbi"),
    cand_sv_vcf = join(MANTA_OUTPUT_DIR, "results/variants/candidateSV.vcf.gz"),
    cand_sv_idx = join(MANTA_OUTPUT_DIR, "results/variants/candidateSV.vcf.gz.tbi"),
  log:
    join(LOGDIR, "manta.log"),
  threads: _get_all_cores
  resources:
      mem_mb=4096,
  shell:
    "rm -rf {params.output_dir}; "
    "$MANTA_BIN/configManta.py "
    "--normalBam {input.normal} "
    "--tumorBam {input.tumor} "
    "--referenceFasta {params.reference} "
    "--exome "
    "--runDir {params.output_dir} &> {log}; "
    "{params.output_dir}/runWorkflow.py --memGb {resources.mem_mb} -j {threads} "
    ">> {log} 2>&1"

MUTATION_TYPES=['snvs', 'indels']

# If not running in a Docker image, user must have these environment variables set:
# - STRELKA_BIN: directory of Strelka installation, must contain configureStrelkaWorkflow.pl
# - STRELKA_CONFIG: path to Strelka config file
rule strelka2:
  input:
    indel_candidates = join(MANTA_OUTPUT_DIR, "results/variants/candidateSmallIndels.vcf.gz"),
    normal = join(WORKDIR, "normal_aligned_coordinate_sorted_dups_indelreal_bqsr.bam"),
    tumor = join(WORKDIR, "tumor_aligned_coordinate_sorted_dups_indelreal_bqsr.bam")
  output:
    expand(join(WORKDIR, "strelka_output/results/variants/somatic.{type}.vcf.gz"),
      type=MUTATION_TYPES)
  params:
    output_dir = join(WORKDIR, "strelka_output"),
    reference = config["reference"]["genome"]
  benchmark:
    join(BENCHMARKDIR, "strelka2.txt")
  log:
    join(LOGDIR, "strelka2.log")
  threads: _get_all_cores
  shell:
    "rm -rf {params.output_dir}; "
    "$STRELKA_BIN/configureStrelkaSomaticWorkflow.py "
    "--normalBam {input.normal} "
    "--tumorBam {input.tumor} "
    "--referenceFasta {params.reference} "
    # "--config $STRELKA_CONFIG "
    "--indelCandidates {input.indel_candidates} "
    "--exome "
    "--runDir {params.output_dir} &> {log}; "
    "{params.output_dir}/runWorkflow.py -m local -j {threads} "
    ">> {log} 2>&1"

rule strelka_filter:
  input:
    join(WORKDIR, "strelka_output/results/variants/somatic.{type}.vcf.gz")
  params:
    reference = config["reference"]["genome"]
  benchmark:
    join(BENCHMARKDIR, "select_passed_{type}.txt")
  log:
    join(LOGDIR, "select_passed_{type}.log")
  output:
    join(WORKDIR, "strelka_output/results/variants/passed.somatic.{type}.vcf")
  shell:
    "gatk "
    "-T SelectVariants "
    "-R {params.reference} "
    "-V {input} "
    "-o {output} "
    "--excludeFiltered "
    ">> {log} 2>&1"

rule strelka_combine:
  input:
    snvs = join(WORKDIR, "strelka_output/results/variants/passed.somatic.snvs.vcf"),
    indels = join(WORKDIR, "strelka_output/results/variants/passed.somatic.indels.vcf")
  output:
    join(WORKDIR, "strelka.vcf")
  params:
    reference = config["reference"]["genome"]
  benchmark:
    join(BENCHMARKDIR, "strelka_combine.txt")
  log:
    join(LOGDIR, "strelka_combine.log")
  shell:
    "gatk -T CombineVariants "
    "--variant:snvs {input.snvs} "
    "--variant:indels {input.indels} "
    "-R {params.reference} "
    "-genotypeMergeOptions PRIORITIZE "
    "-o {output} "
    "-priority snvs,indels "
    "2> {log}"

rule haplotype_caller_per_chr:
  input:
    normal = join(WORKDIR, "normal_aligned_coordinate_sorted_dups_indelreal_bqsr.bam")
  output:
    join(WORKDIR, "normal_germline_snps_indels_{chr}.vcf")
  params:
    reference = config["reference"]["genome"],
    dbsnp = config["reference"]["dbsnp"]
  benchmark:
    join(BENCHMARKDIR, "haplotype_caller_{chr}.txt")
  log:
    join(LOGDIR, "haplotype_caller_{chr}.log")
  shell:
    "gatk -T HaplotypeCaller "
    "-R {params.reference} "
    "-I {input.normal} "
    "--dbsnp {params.dbsnp} "
    "--intervals {wildcards.chr} "
    "-o {output} "
    ">> {log} 2>&1"

rule haplotype_caller:
  input:
    expand(join(WORKDIR, "normal_germline_snps_indels_{chr}.vcf"), chr=config["contigs"])
  output:
    join(WORKDIR, "normal_germline_snps_indels.vcf")
  shell:
    "vcf-concat {input} > {output}"

rule extract_snps:
  input:
    join(WORKDIR, "normal_germline_snps_indels.vcf")
  output:
    join(WORKDIR, "normal_germline_snps.vcf")
  params:
    reference = config["reference"]["genome"]
  benchmark:
    join(BENCHMARKDIR, "extract_snps.txt")
  log:
    join(LOGDIR, "extract_snps.log")
  shell:
    "gatk "
    "-T SelectVariants "
    "-R {params.reference} "
    "-V {input} "
    "-selectType SNP "
    "-o {output} "
    ">> {log} 2>&1"

# Filters recommended at https://software.broadinstitute.org/gatk/documentation/article.php?id=2806
rule filter_snps:
  input:
    join(WORKDIR, "normal_germline_snps.vcf")
  output:
    join(WORKDIR, "filtered_normal_germline_snps.vcf")
  params:
    reference = config["reference"]["genome"]
  benchmark:
    join(BENCHMARKDIR, "filter_snps_benchmark.txt")
  log:
    join(LOGDIR, "filter_snps.log")
  shell:
    "gatk " 
    "-T VariantFiltration "
    "-R {params.reference} "
    "-V {input} "
    "--filterExpression \"QD < 2.0 || FS > 60.0 || MQ < 40.0 || SOR > 3.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0\" "
    "--filterName \"gatk_snp_filter\" "
    "-o {output} "
    ">> {log} 2>&1"

rule extract_indels:
  input:
    join(WORKDIR, "normal_germline_snps_indels.vcf")
  output:
    join(WORKDIR, "normal_germline_indels.vcf")
  params:
    reference = config["reference"]["genome"]
  benchmark:
    join(BENCHMARKDIR, "extract_indels.txt")
  log:
    join(LOGDIR, "extract_indels.log")
  shell:
    "gatk "
    "-T SelectVariants "
    "-R {params.reference} "
    "-V {input} "
    "-selectType INDEL "
    "-o {output} "
    ">> {log} 2>&1"

# Filters recommended at https://software.broadinstitute.org/gatk/documentation/article.php?id=2806
rule filter_indels:
  input:
    join(WORKDIR, "normal_germline_indels.vcf")
  output:
    join(WORKDIR, "filtered_normal_germline_indels.vcf")
  params:
    reference = config["reference"]["genome"]
  benchmark:
    join(BENCHMARKDIR, "filter_indels.txt")
  log:
    join(LOGDIR, "filter_indels.log")
  shell:
    "gatk " 
    "-T VariantFiltration "
    "-R {params.reference} "
    "-V {input} "
    "--filterExpression \"QD < 2.0 || FS > 200.0 || SOR > 10.0 || ReadPosRankSum < -20.0\" "
    "--filterName \"gatk_indel_filter\" "
    "-o {output} "
    ">> {log} 2>&1"

rule combine_germline_variants:
  input:
    expand(join(WORKDIR, "filtered_normal_germline_{var}.vcf"), var=["snps", "indels"])
  output:
    join(WORKDIR, "filtered_normal_germline_snps_indels.vcf")
  shell:
    "vcf-concat {input} > {output}"

if "capture_kit_coverage_file" in config["reference"]:
  rule intersect_with_coverage_file:
    input:
      join(WORKDIR, "filtered_normal_germline_snps_indels.vcf")
    output:
      join(WORKDIR, "filtered_covered_normal_germline_snps_indels.vcf")
    params:
      coverage_file = config["reference"]["capture_kit_coverage_file"]
    shell:
      "bedtools intersect -a {input} -b {params.coverage_file} -header > {output}"
